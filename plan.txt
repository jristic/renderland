*** Quality of life for sample building
	* SetGlobal for constant&resource to always bind a certain texture for a given name in shader.
	* Make constant/resource not found a warning.

* Hex uint literals. binary too?
* Warning instead of error for missing constant.
	* Warnings as error setting.

* Use linear memory allocator for RenderDescription allocations. 
* Defines that are usable within the RLF and shader. 
* Integrate RenderDoc capture?
* Investigate automatically reloading any time a file is updated.
* Dynamic flow control? 
	* Some way to only run a pass on the first frame, for instance. 
	* Some way to choose which shader to run based on some condition. 

**** Expand D3D feature support.
	* Texture arrays, cubes, 3d textures.
	* Append and consume buffers.
	* Support UAVs in pixel and vertex shaders.

*** Cleanup:
	* Parser errors which happen post-consume point to the token after the one actually in question
	* Handle various errors in specifying views/resources (mainly providing the wrong kind).
	* Check bounds of viewport expressions are valid, throw error or warning?
	* Texture flag cleanup -> SRV/UAV/RTV/DSV can be determined from usage. or keep it explicit?
		* Buffer flags too, especially where in D3D12 the flags don't mean anything but in d3d11 they do
	* Make obj parsing handle not having normals or UVs. 

*** Input/output refactor
	* Remove system values and instead let RLF declare its inputs and outputs
	* Then we can have an rlf invoke a sub-rlf to allow logic reuse. 
		* Probably implement as a separate RenderDescription for the sub-rlf?
		* Will need to remove use of statics in parse and interpreter. 

*** Shader parser
	* Deducing struct sizes
		* Support nested anonymous structs
		* Support includes
		* Support defines
	* Error messages
		* file/line/location of occurence
	* Maybe I should make the tokenizer code common between the rlf and shader parsers?

*** D3D12
	* Handle when user errors cause a device removal
		* Can we recreate the device and continue?

*** AST expressions to
	* Add clamp, saturate
	* Rounded up divide

*** Obj import expansion
	* How do we get to a place where drawing test scenes (ie. sponza) is doable?
	* Some way to get the textures of a material on an object?
	* Support multi-object models?
	* Or generate a sub-rlf that does all the busywork of making draws out of potentially many objects and materials?

*** UI:
	* Event-viewer style list of the passes in a frame. 
		* Shader constants display should handle vector/matrix/array types.
	* Debug viz tools for seeing the contents of textures/buffers/rendertargets/depthstencils at any given point in the frame. 
	* Sample browser for faster way to open various samples for testing
	* Display pane
		* Ability to show multiple outputs, when the rlf input/output system has been refactored.
		* Prevent it from being undocked from the center?
		* Options for how to display the texture, like renderdoc (alpha, ranges, etc). 
			* Changing this should fix the issue where imgui blends Image() with the window background if alpha is not 1. 

Samples:
	* Shadow-sampling methods comparison. 
	* Clustered lighting.
	* Compute-based culling with draw-indirect.
	* Mirror reflection. 
	* Compute fluid simulation. 
	* Compute sorted triangles for transparency rendering. 
	* Deferred rendering with gbuffers.
