* Use linear memory allocator for RenderDescription allocations. 


* Defines that are usable within the RLF and shader. 
* Allow #include of other RLF files
* Allow populating texture from file (DDS).
* Specify shader parameters in the RLF and allow tuning via the imgui display.
	* Should I fill a constant buffer declared in the shader using reflection info? or generate a global / per-dispatch constant buffer for shaders?
* Better way to size structured buffers.
	* right now you have to figure out manually how big a struct would be and enter that as the ElementSize field.
* Integrate RenderDoc capture?
* Investigate automatically reloading any time a file is updated.
* Dynamic flow control? 
	* Some way to only run a pass on the first frame, for instance. 
	* Some way to choose which shader to run based on some condition. 

**** Expand to the draw pipeline.
	* Rasterizer state.
	* Viewport.
	* Blend state.
	* IA stage -> vertex buffers, index buffers, input layouts.
	* Multiple RT support. 
	* Instancing for draws.
	* Indirect dispatch and draws.
		* will need to implment append and consume buffers as well.
	* MSAA support.

* Sample: Compute-generated vertex buffer for a draw
* Sample: Shadow-sampling methods comparison. 
* Sample: Clustered lighting.
* Sample: Compute-based culling with draw-indirect.
