* Allow declaring RLF structures inline as well as by reference. 
* Specify shader parameters in the RLF and allow tuning via the imgui display.
* Proper error reporting mechanism for RLF (rather than asserts).
	* Put the parsing on a thread so it can exit on error without affecting the process.
		* will need to make sure any allocations that need to be freed are recorded in the state before an error could interrupt. 
		* must not put things like std containers on the stack as they won't be cleaned up by ExitThread
			-> currently the ParseState will have this problem. 
	* Count newlines and characters to indicate line and char where it happened. 
* Allow specifying buffers/textures in RLF.
	* Declaration for buffers and textures -> format, usage, etc.
	* Speicfy input and output resources for dispatches
	* Special value texture for backbuffer?
* Replace std::string usage with own implementation. 
* Integrate RenderDoc capture?
* Expand to the draw pipeline.
* Investigate automatically reloading any time a file is updated.
