
constant uint VertCount = 482;

ObjImport {
	ObjPath = "sphere.obj";
} sphere

Buffer {
	Flags = { Vertex, Raw };
	InitData = sphere.vertices;
} verts

Buffer {
	Flags = {Index};
	InitData = sphere.indices;
} indices

Texture {
	Size = DisplaySize();
	Flags = {RTV,SRV};
} RT

Texture {
	Size = DisplaySize();
	Format = D16_UNORM;
	Flags = {DSV,};
} DS

Dispatch {
	Shader = ComputeShader {
		ShaderPath = "shaders.hlsl";
		EntryPoint = "CSMain";
	};
	Groups = {8,1,1};
	bind OutVerts = UAV { Resource=verts; Format=R32_TYPELESS; NumElements=3856; };
	setconstant Time = time();
	setconstant VertCount = VertCount;
} updateVerts

Draw {
	Topology = TriList;
	VShader = VertexShader {
		ShaderPath = "vertex.hlsl";
		EntryPoint = "VSMain";
	};
	PShader = PixelShader {
		ShaderPath = "pixel.hlsl";
		EntryPoint = "PSMain";
	};
	VertexBuffer = verts;
	IndexBuffer = indices;
	RenderTarget = RT;
	DepthStencil = DS;
	SetConstantVs Matrix = 
		projection(3.14/2, DisplaySize().x / float(DisplaySize().y), 0.1, 10)
		* 
		lookAt(float3(2,1,0), float3(0,0,0));
} obj_draw

Passes {
	ClearColor { Target = RT; Color = {0,0,0,1}; },
	ClearDepth { Target = DS; Depth = 1; },
	updateVerts,
	obj_draw
}

output RT
