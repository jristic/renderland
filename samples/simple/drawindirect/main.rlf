
Buffer {
	ElementSize = 4;
	ElementCount = 8;
	Flags = {IndirectArgs,Raw};
} iargs

Buffer {
	ElementSize = 4;
	ElementCount = 8;
	InitData = u32{0,0,0,0,4,4,4,4};
	Flags = {Vertex};
} InstanceBuffer

VertexShader {
	ShaderPath = "shaders.hlsl";
	EntryPoint = "VSMain";
	InputLayout = {
		InputElementDesc {
			SemanticName = "TEXCOORD";
			SemanticIndex = 0;
			Format = R32_UINT;
			InputSlot = 0;
			InputSlotClass = PerInstance;
			InstanceDataStepRate = 1;
		},
	};
} vs

PixelShader {
	ShaderPath = "shaders.hlsl";
	EntryPoint = "PSMain";
} ps

Passes {
	Dispatch {
		Shader = ComputeShader {
			ShaderPath = "shaders.hlsl";
			EntryPoint = "CSProducer";
		};
		Groups = { 1, 1, 1 };
		Bind OutArgs = UAV { Resource=iargs; Format=R32_TYPELESS; };
		setconstant Time = time();
	},
	Draw {
		VShader = vs;
		PShader = ps;
		VertexBuffers = { InstanceBuffer };
		instancedindirectargs = iargs;
		indirectargsoffset = 0;
		RenderTarget = @BackBuffer;
		setconstantvs Time = time();
	},
	Draw {
		VShader = vs;
		PShader = ps;
		VertexBuffers = { InstanceBuffer };
		instancedindirectargs = iargs;
		indirectargsoffset = 16;
		RenderTarget = @BackBuffer;
		setconstantvs Time = time();
	}
}
