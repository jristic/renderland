
tuneable uint BallCount [1,64] = 32;

Buffer {
	ElementSize = 16;
	ElementCount = BallCount;
	Flags = { Structured };
	InitToZero = true;
} Points

ComputeShader {
	ShaderPath = "producer.hlsl";
	EntryPoint = "CSMain";
} producer

Dispatch {
	Shader = producer;
	// TODO: Need a max function in AST to prevent underflow if BallCount were 0.
	// TODO: A divide with rounding up would be even more helpful.
	Groups = { ((BallCount - 1) / 32) + 1, 1, 1 };
	Bind Points = Points;
	SetConstant TextureSize = DisplaySize();
	SetConstant BallCount = BallCount;
} producerDispatch

ComputeShader {
	ShaderPath = "consumer.hlsl";
	EntryPoint = "CSMain";
} consumer

Dispatch {
	Shader = consumer;
	ThreadPerPixel = true;
	Bind OutTexture = @BackBuffer;
	Bind Points=Points;
	SetConstant TextureSize = DisplaySize();
	SetConstant BallCount = BallCount;
} consumerDispatch

Passes {
	producerDispatch,
	consumerDispatch
}
